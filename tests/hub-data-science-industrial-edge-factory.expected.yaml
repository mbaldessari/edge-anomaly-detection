---
# Source: hub-data-science/templates/ci-cd-demo-pipeline-secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: git-connection
  namespace: ml-development
stringData:
  ops_repo_location: ""
  git_user: ""
  git_password: ""
---
# Source: hub-data-science/templates/modelmesh/storage-config-secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: storage-config
  namespace: ml-development
stringData:
  odf: |
    {
      "type": "s3",
      "bucket": "CHANGE_ME",
      "access_key_id": "CHANGE_ME",
      "secret_access_key": "CHANGE_ME",
      "endpoint_url": "http://s3.openshift-storage.svc.cluster.local/",
      "region": "us-south",
      "anonymous": "False"
    }
type: Opaque
---
# Source: hub-data-science/templates/custom-notebooks.yaml
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  annotations:
    opendatahub.io/notebook-image-name: "Face recognition"
    opendatahub.io/notebook-image-desc: >-
      Jupyter notebook image enabling computer vision use cases, in particular face recognition.
  name: face-recognition
  namespace: redhat-ods-applications
  labels:
    component.opendatahub.io/name: jupyterhub
    opendatahub.io/component: "true"
    opendatahub.io/notebook-image: "true"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: "1.0.3"
      from:
        kind: DockerImage
        name: quay.io/mmurakam/workbenches:face-recognition-v1.0.3
      importPolicy: {}
      referencePolicy:
        type: Local
      annotations:
        opendatahub.io/notebook-python-dependencies: >-
          [{"name":"opencv","version":"4.6.0.66"},{"name":"face-recognition","version":"1.3.0"}]
        opendatahub.io/notebook-software: '[{"name":"Python","version":"3.9"}]'
---
# Source: hub-data-science/templates/custom-notebooks.yaml
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  annotations:
    opendatahub.io/notebook-image-name: "Code Server CUDA Data Science"
    opendatahub.io/notebook-image-desc: >-
      Jupyter notebook image with VS Code application.
  name: code-server-cuda-data-science
  namespace: redhat-ods-applications
  labels:
    component.opendatahub.io/name: jupyterhub
    opendatahub.io/component: "true"
    opendatahub.io/notebook-image: "true"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: "2023a"
      from:
        kind: DockerImage
        name: quay.io/opendatahub-contrib/workbench-images:cuda-code-server-ubi9-py39_2023b_latest
      importPolicy: {}
      referencePolicy:
        type: Local
      annotations:
        opendatahub.io/notebook-python-dependencies: >-
          [{"name":"code-server","version":"4.9.0"},{"name":"cuda","version":"11.8.0"},{"name":"cudnn","version":"8.6.0"}]
        opendatahub.io/notebook-software: '[{"name":"Python","version":"3.9"}]'
---
# Source: hub-data-science/templates/custom-notebooks.yaml
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  annotations:
    opendatahub.io/notebook-image-name: "Spark"
    opendatahub.io/notebook-image-desc: >-
      Jupyter notebook image with PySpark.
  name: spark
  namespace: redhat-ods-applications
  labels:
    component.opendatahub.io/name: jupyterhub
    opendatahub.io/component: "true"
    opendatahub.io/notebook-image: "true"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: "1.0.1"
      from:
        kind: DockerImage
        name: quay.io/mmurakam/workbenches:spark-v1.0.1
      importPolicy: {}
      referencePolicy:
        type: Local
      annotations:
        opendatahub.io/notebook-python-dependencies: >-
          [{"name":"pyspark","version":"3.3.1"},{"name":"hadoop","version":"3.3.4"}]
        opendatahub.io/notebook-software: '[{"name":"Python","version":"3.9"}]'
---
# Source: hub-data-science/templates/custom-notebooks.yaml
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  annotations:
    opendatahub.io/notebook-image-name: "OptaPy"
    opendatahub.io/notebook-image-desc: >-
      Jupyter notebook image with OptaPy.
  name: optapy
  namespace: redhat-ods-applications
  labels:
    component.opendatahub.io/name: jupyterhub
    opendatahub.io/component: "true"
    opendatahub.io/notebook-image: "true"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: "2023a"
      from:
        kind: DockerImage
        name: quay.io/opendatahub-contrib/workbench-images:jupyter-optapy-ubi9-py39_2023a_20230101
      importPolicy: {}
      referencePolicy:
        type: Local
      annotations:
        opendatahub.io/notebook-python-dependencies: >-
          [{"name":"optapy","version":"8.31.1b0"}]
        opendatahub.io/notebook-software: '[{"name":"Python","version":"3.9"}]'
---
# Source: hub-data-science/templates/custom-notebooks.yaml
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  annotations:
    opendatahub.io/notebook-image-name: "RStudio CUDA Data Science"
    opendatahub.io/notebook-image-desc: >-
      Jupyter notebook image RStudio application.
  name: rstudio-cuda-data-science
  namespace: redhat-ods-applications
  labels:
    component.opendatahub.io/name: jupyterhub
    opendatahub.io/component: "true"
    opendatahub.io/notebook-image: "true"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: "2023a"
      from:
        kind: DockerImage
        name: quay.io/opendatahub-contrib/workbench-images:cuda-rstudio-c9s-py39_2023b_latest
      importPolicy: {}
      referencePolicy:
        type: Local
      annotations:
        opendatahub.io/notebook-python-dependencies: >-
          [{"name":"rstudio","version":"2022.07.2-576"},{"name":"cuda","version":"11.8.0"},{"name":"cudnn","version":"8.6.0"}]
        opendatahub.io/notebook-software: '[{"name":"R","version":"4.2.2"}]'
---
# Source: hub-data-science/templates/custom-notebooks.yaml
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  annotations:
    opendatahub.io/notebook-image-name: "Monai"
    opendatahub.io/notebook-image-desc: >-
      Jupyter notebook image with Monai.
  name: monai
  namespace: redhat-ods-applications
  labels:
    component.opendatahub.io/name: jupyterhub
    opendatahub.io/component: "true"
    opendatahub.io/notebook-image: "true"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: "2023a"
      from:
        kind: DockerImage
        name: quay.io/opendatahub-contrib/workbench-images:jupyter-monai-c9s-py39_2023a_20230101
      importPolicy: {}
      referencePolicy:
        type: Local
      annotations:
        opendatahub.io/notebook-python-dependencies: >-
          [{"name":"monai","version":"1.1.0"},{"name":"opencv","version":"4.7.0"},{"name":"torch","version":"1.13.1"},{"name":"elyra","version":"3.14.1"}]
        opendatahub.io/notebook-software: '[{"name":"Python","version":"3.9"}]'
---
# Source: hub-data-science/templates/custom-notebooks.yaml
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  annotations:
    opendatahub.io/notebook-image-name: "Object detection"
    opendatahub.io/notebook-image-desc: >-
      Jupyter notebook image enabling computer vision use cases, in particular object detection.
  name: object-detection
  namespace: redhat-ods-applications
  labels:
    component.opendatahub.io/name: jupyterhub
    opendatahub.io/component: "true"
    opendatahub.io/notebook-image: "true"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: "1.0.5"
      from:
        kind: DockerImage
        name: quay.io/mmurakam/workbenches:object-detection-v1.0.5
      importPolicy: {}
      referencePolicy:
        type: Local
      annotations:
        opendatahub.io/notebook-python-dependencies: >-
          [{"name":"opencv","version":"4.8.0.74"},{"name":"ultralytics","version":"8.0.130"},{"name":"onnxruntime","version":"1.15.1"}]
        opendatahub.io/notebook-software: '[{"name":"Python","version":"3.9"}]'
---
# Source: hub-data-science/templates/custom-notebooks.yaml
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  annotations:
    opendatahub.io/notebook-image-name: "Trino"
    opendatahub.io/notebook-image-desc: >-
      Jupyter notebook image enabling data integration through Trino and Starburst.
  name: trino
  namespace: redhat-ods-applications
  labels:
    component.opendatahub.io/name: jupyterhub
    opendatahub.io/component: "true"
    opendatahub.io/notebook-image: "true"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: "1.0.0"
      from:
        kind: DockerImage
        name: quay.io/mmurakam/workbenches:trino-v1.0.0
      importPolicy: {}
      referencePolicy:
        type: Local
      annotations:
        opendatahub.io/notebook-python-dependencies: >-
          [{"name":"trino","version":"0.323.0"},{"name":"scikit-learn","version":"0.24.2"}]
        opendatahub.io/notebook-software: '[{"name":"Python","version":"3.9"}]'
---
# Source: hub-data-science/templates/custom-notebooks.yaml
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  annotations:
    opendatahub.io/notebook-image-name: "Codeflare notebook"
    opendatahub.io/notebook-image-desc: >-
      Jupyter notebook image enabling distributed model training with Codeflare.
  name: codeflare
  namespace: redhat-ods-applications
  labels:
    component.opendatahub.io/name: jupyterhub
    opendatahub.io/component: "true"
    opendatahub.io/notebook-image: "true"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: "0.4.5"
      from:
        kind: DockerImage
        name: quay.io/project-codeflare/notebook:v0.4.5
      importPolicy: {}
      referencePolicy:
        type: Local
      annotations:
        opendatahub.io/notebook-python-dependencies: >-
          [{"name":"codeflare-sdk","version":"0.4.5"},{"name":"torch","version":"1.12.1"},{"name":"scikit-learn","version":"0.24.2"}]
        opendatahub.io/notebook-software: '[{"name":"Python","version":"3.8"}]'
---
# Source: hub-data-science/templates/custom-notebooks.yaml
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  annotations:
    opendatahub.io/notebook-image-name: "Fraud detection notebook"
    opendatahub.io/notebook-image-desc: >-
      Jupyter notebook image for running the fraud detection demo.
  name: fraud-detection
  namespace: redhat-ods-applications
  labels:
    component.opendatahub.io/name: jupyterhub
    opendatahub.io/component: "true"
    opendatahub.io/notebook-image: "true"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: "1.0.1"
      from:
        kind: DockerImage
        name: quay.io/mmurakam/workbenches:fraud-detection-v1.0.1
      importPolicy: {}
      referencePolicy:
        type: Local
      annotations:
        opendatahub.io/notebook-python-dependencies: >-
          [{"name":"tensorflow","version":"2.11.1"},{"name":"scikit-learn","version":"1.2.2"},{"name":"trino","version":"0.323.0"}]
        opendatahub.io/notebook-software: '[{"name":"Python","version":"3.8"}]'
---
# Source: hub-data-science/templates/custom-notebooks.yaml
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  annotations:
    opendatahub.io/notebook-image-name: "Langchain notebook"
    opendatahub.io/notebook-image-desc: >-
      Jupyter notebook image with the Langchain stack.
  name: langchain
  namespace: redhat-ods-applications
  labels:
    component.opendatahub.io/name: jupyterhub
    opendatahub.io/component: "true"
    opendatahub.io/notebook-image: "true"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: "2023c"
      from:
        kind: DockerImage
        name: quay.io/opendatahub-contrib/workbench-images:cuda-jupyter-langchain-c9s-py311_2023c_latest
      importPolicy: {}
      referencePolicy:
        type: Local
      annotations:
        opendatahub.io/notebook-python-dependencies: >-
          [{"name":"langchain","version":"0.0.281"},{"name":"torch","version":"2.0.1"},{"name":"codeflare-sdk","version":"0.7.1"}]
        opendatahub.io/notebook-software: '[{"name":"Python","version":"3.8"}]'
---
# Source: hub-data-science/templates/custom-notebooks.yaml
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  annotations:
    opendatahub.io/notebook-image-name: "Langflow notebook"
    opendatahub.io/notebook-image-desc: >-
      Workbench image with the Langflow IDE.
  name: langflow
  namespace: redhat-ods-applications
  labels:
    component.opendatahub.io/name: jupyterhub
    opendatahub.io/component: "true"
    opendatahub.io/notebook-image: "true"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: "2023c"
      from:
        kind: DockerImage
        name: quay.io/opendatahub-contrib/workbench-images:cuda-langflow-langflow-c9s-py39_2023c_latest
      importPolicy: {}
      referencePolicy:
        type: Local
      annotations:
        opendatahub.io/notebook-python-dependencies: >-
          [{"name":"langflow","version":"0.4.18"},{"name":"langchain","version":"0.0.256"},{"name":"torch","version":"2.0.1"}]
        opendatahub.io/notebook-software: '[{"name":"Python","version":"3.8"}]'
---
# Source: hub-data-science/templates/modelmesh/anomaly-detection-inference-service.yaml
apiVersion: serving.kserve.io/v1beta1
kind: InferenceService
metadata:
  annotations:
    serving.kserve.io/deploymentMode: ModelMesh
  name: anomaly-detection
  namespace: ml-development
spec:
  predictor:
    model:
      modelFormat:
        name: sklearn
      storage:
        key: odf
        path: model-xxxxxx.joblib
---
# Source: hub-data-science/templates/anomaly-detection-models-obc.yaml
apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: anomaly-detection
  namespace: ml-development
  finalizers:
    - objectbucket.io/finalizer
  labels:
    app: noobaa
    bucket-provisioner: openshift-storage.noobaa.io-obc
    noobaa-domain: openshift-storage.noobaa.io
spec:
  additionalConfig:
    bucketclass: noobaa-default-bucket-class
  generateBucketName: anomaly-detection
  objectBucketName: obc-odh-applications-anomaly-detection
  storageClassName: openshift-storage.noobaa.io
---
# Source: hub-data-science/templates/modelmesh/custom-serving-runtimes.yaml
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: triton
  namespace: redhat-ods-applications
  labels:
    opendatahub.io/dashboard: 'true'
  annotations:
    opendatahub.io/template-enabled: 'true'
    tags: 'triton,servingruntime'
objects:
  - apiVersion: serving.kserve.io/v1alpha1
    kind: ServingRuntime
    metadata:
      name: triton
      labels:
        name: modelmesh-serving-triton-2.x-SR
      annotations:
        maxLoadingConcurrency: '2'
    spec:
      supportedModelFormats:
        - name: keras
          version: '2'
          autoSelect: true
        - name: onnx
          version: '1'
          autoSelect: true
        - name: pytorch
          version: '1'
          autoSelect: true
        - name: tensorflow
          version: '1'
          autoSelect: true
        - name: tensorflow
          version: '2'
          autoSelect: true
        - name: tensorrt
          version: '7'
          autoSelect: true
      protocolVersions:
        - grpc-v2
      multiModel: true
      grpcEndpoint: 'port:8085'
      grpcDataEndpoint: 'port:8001'
      containers:
        - name: triton
          image: 'nvcr.io/nvidia/tritonserver:21.06.1-py3'
          command:
            - /bin/sh
          args:
            - '-c'
            - >-
              mkdir -p /models/_triton_models; chmod 777 /models/_triton_models;
              exec tritonserver "--model-repository=/models/_triton_models"
              "--model-control-mode=explicit" "--strict-model-config=false"
              "--strict-readiness=false" "--allow-http=true"
              "--allow-sagemaker=false" 
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: '5'
              memory: 1Gi
          livenessProbe:
            exec:
              command:
                - curl
                - '--fail'
                - '--silent'
                - '--show-error'
                - '--max-time'
                - '9'
                - 'http://localhost:8000/v2/health/live'
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 10
      builtInAdapter:
        serverType: triton
        runtimeManagementPort: 8001
        memBufferBytes: 134217728
        modelLoadingTimeoutMillis: 90000
---
# Source: hub-data-science/templates/modelmesh/custom-serving-runtimes.yaml
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: mlserver
  namespace: redhat-ods-applications
  labels:
    opendatahub.io/dashboard: 'true'
  annotations:
    opendatahub.io/template-enabled: 'true'
    tags: 'mlserver,servingruntime'
objects:
  - apiVersion: serving.kserve.io/v1alpha1
    kind: ServingRuntime
    metadata:
      name: mlserver
      labels:
        name: modelmesh-serving-mlserver-1.x-SR
    spec:
      supportedModelFormats:
        - name: sklearn
          version: "0" # v0.23.1
          autoSelect: true
        - name: xgboost
          version: "1" # v1.1.1
          autoSelect: true
        - name: lightgbm
          version: "3" # v3.2.1
          autoSelect: true

      protocolVersions:
        - grpc-v2
      multiModel: true

      grpcEndpoint: "port:8085"
      grpcDataEndpoint: "port:8001"

      containers:
        - name: mlserver
          image: seldonio/mlserver:0.5.2
          env:
            - name: MLSERVER_MODELS_DIR
              value: "/models/_mlserver_models/"
            - name: MLSERVER_GRPC_PORT
              value: "8001"
            # default value for HTTP port is 8080 which conflicts with MMesh's
            # Litelinks port
            - name: MLSERVER_HTTP_PORT
              value: "8002"
            - name: MLSERVER_LOAD_MODELS_AT_STARTUP
              value: "false"
            # Set a dummy model name via environment so that MLServer doesn't
            # error on a RepositoryIndex call when no models exist
            - name: MLSERVER_MODEL_NAME
              value: dummy-model-fixme
            # Set server addr to localhost to ensure MLServer only listen inside the pod
            - name: MLSERVER_HOST
              value: "127.0.0.1"
            # Increase gRPC max message size to support larger payloads
            # Unlimited because it will be restricted at the model mesh layer
            - name: MLSERVER_GRPC_MAX_MESSAGE_LENGTH
              value: "-1"
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: "5"
              memory: 1Gi
      builtInAdapter:
        serverType: mlserver
        runtimeManagementPort: 8001
        memBufferBytes: 134217728
        modelLoadingTimeoutMillis: 90000
---
# Source: hub-data-science/templates/modelmesh/custom-serving-runtimes.yaml
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: torchserve
  namespace: redhat-ods-applications
  labels:
    opendatahub.io/dashboard: 'true'
  annotations:
    opendatahub.io/template-enabled: 'true'
    tags: 'torchserve,servingruntime'
objects:
  - apiVersion: serving.kserve.io/v1alpha1
    kind: ServingRuntime
    metadata:
      name: torchserve
      labels:
        name: modelmesh-serving-torchserve-0.x-SR
    spec:
      supportedModelFormats:
        - name: pytorch-mar
          version: "0"
          autoSelect: true

      multiModel: true

      grpcEndpoint: "port:8085"
      grpcDataEndpoint: "port:7070"

      containers:
        - name: torchserve
          image: pytorch/torchserve:0.6.0-cpu
          args:
            # Adapter creates the config file; wait for it to exist before starting
            - while [ ! -e "$TS_CONFIG_FILE" ]; do echo "waiting for config file..."; sleep 1; done;
            - exec
            - torchserve
            - --start
            - --foreground
          env:
            - name: TS_CONFIG_FILE
              value: /models/_torchserve_models/mmconfig.properties
            # TBD, this may give better performance
            #- name: TS_PREFER_DIRECT_BUFFER
            #  value: true
            # Additional TS_ prefixed TorchServe config options may be added here
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: "5"
              memory: 1Gi
      builtInAdapter:
        serverType: torchserve
        runtimeManagementPort: 7071
        memBufferBytes: 134217728
        modelLoadingTimeoutMillis: 90000
